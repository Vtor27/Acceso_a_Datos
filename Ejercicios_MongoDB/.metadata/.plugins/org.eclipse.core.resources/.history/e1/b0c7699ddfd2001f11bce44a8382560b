package com.Miniproyecto.MongoDB;

import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.bson.Document;
import org.json.JSONObject;

import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;

public class App {
	
	static MongoCollection<Document> coleccion;
	
	public static void mostrarTodos() {
		MongoCursor<Document> cursor = coleccion.find().iterator();
		while(cursor.hasNext()) {
			JSONObject obj = new JSONObject(cursor.next().toJson());
			System.out.println("ID: " + obj.getString("Id") + " - TITULO: " + obj.getString("titulo"));
		}
	}

	public static void main(String[] args) throws InterruptedException {
		Logger mongoLogger = Logger.getLogger("org.mongodb.driver");
		mongoLogger.setLevel(Level.SEVERE);//e.g. or Log.Warning, etc...

		MongoClient mongoClient = new MongoClient("localhost", 27017);
		MongoDatabase dataBase = mongoClient.getDatabase("Biblioteca_Miniproyecto");
		coleccion = dataBase.getCollection("libros");	
		
		Scanner scanner = new Scanner(System.in);
		int opcion = 0;
		String id;
		
		//Thread.sleep(500);
		
		while (opcion != 6) {
			System.out.println("\n\n=================================================");
			System.out.println("                     MENÚ BIBLIOTECA");
			System.out.println("=================================================");
			System.out.println("1. Mostrar todos los títulos de la biblioteca.");
			System.out.println("2. Mostrar información detallada de un libro.");
			System.out.println("3. Crear un nuevo libro.");
			System.out.println("4. Actualizar libro.");
			System.out.println("5. Borrar libro.");
			System.out.println("6. Cerrar biblioteca");
			System.out.print("\n >>> Elige una opcion: ");
			opcion= Integer.parseInt(scanner.nextLine());
			switch (opcion) {
			case 1: {
				
				break;
			}case 2: {
				
				break;
			}case 3: {
				
				break;
			}case 4: {
				
				break;
			}case 5: {
				
				break;
			}case 6: {
				
				break;
			}
			default:
				throw new IllegalArgumentException("Unexpected value: " + opcion);
			}
		}
	}

}
